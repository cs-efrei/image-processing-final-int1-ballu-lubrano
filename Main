#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    unsigned char header[54];
    unsigned char colorTable[1024];
    unsigned char *data;

    unsigned int width;
    unsigned int height;
    unsigned int colorDepth;
    unsigned int dataSize;
} t_bmp8;


t_bmp8* bmp8_loadImage(const char* filename);
void bmp8_saveImage(const char* filename, t_bmp8* img);
void bmp8_free(t_bmp8* img);
void bmp8_printInfo(t_bmp8* img);
void bmp8_negative(t_bmp8* img);
void bmp8_brightness(t_bmp8* img, int value);
void bmp8_threshold(t_bmp8* img, int threshold);
void bmp8_applyFilter(t_bmp8* img, float** kernel, int kernelSize);


float** createKernel(int size) {
    float** kernel = (float**)malloc(size * sizeof(float*));
    for (int i = 0; i < size; i++) {
        kernel[i] = (float*)malloc(size * sizeof(float));
    }
    return kernel;
}


void freeKernel(float** kernel, int size) {
    for (int i = 0; i < size; i++) {
        free(kernel[i]);
    }
    free(kernel);
}


t_bmp8* bmp8_loadImage(const char* filename) {
    FILE* file = fopen(filename, "rb");
    if (!file) {
        printf("Error: Could not open file %s\n", filename);
        return NULL;
    }

    t_bmp8* img = (t_bmp8*)malloc(sizeof(t_bmp8));
    if (!img) {
        printf("Error: Memory allocation failed\n");
        fclose(file);
        return NULL;
    }

   
    fread(img->header, sizeof(unsigned char), 54, file);

    // Extract image information from the header
    img->width = *(unsigned int*)&img->header[18];
    img->height = *(unsigned int*)&img->header[22];
    img->colorDepth = *(unsigned int*)&img->header[28];
    img->dataSize = *(unsigned int*)&img->header[34];

   
    if (img->colorDepth != 8) {
        printf("Error: Image is not 8-bit grayscale\n");
        fclose(file);
        free(img);
        return NULL;
    }

    
    fread(img->colorTable, sizeof(unsigned char), 1024, file);

    
    img->data = (unsigned char*)malloc(img->dataSize);
    if (!img->data) {
        printf("Error: Memory allocation failed\n");
        fclose(file);
        free(img);
        return NULL;
    }

    
    fread(img->data, sizeof(unsigned char), img->dataSize, file);

    fclose(file);
    return img;
}


void bmp8_saveImage(const char* filename, t_bmp8* img) {
    FILE* file = fopen(filename, "wb");
    if (!file) {
        printf("Error: Could not open file %s\n", filename);
        return;
    }

   
    fwrite(img->header, sizeof(unsigned char), 54, file);

    
    fwrite(img->colorTable, sizeof(unsigned char), 1024, file);

    
    fwrite(img->data, sizeof(unsigned char), img->dataSize, file);

    fclose(file);
}


void bmp8_free(t_bmp8* img) {
    if (img) {
        if (img->data) {
            free(img->data);
        }
        free(img);
    }
}


void bmp8_printInfo(t_bmp8* img) {
    printf("Image Info:\n");
    printf("    Width: %u\n", img->width);
    printf("    Height: %u\n", img->height);
    printf("    Color Depth: %u\n", img->colorDepth);
    printf("    Data Size: %u\n", img->dataSize);
}


void bmp8_negative(t_bmp8* img) {
    for (unsigned int i = 0; i < img->dataSize; i++) {
        img->data[i] = 255 - img->data[i];
    }
}


void bmp8_brightness(t_bmp8* img, int value) {
    for (unsigned int i = 0; i < img->dataSize; i++) {
        int newValue = img->data[i] + value;
        if (newValue > 255) newValue = 255;
        if (newValue < 0) newValue = 0;
        img->data[i] = (unsigned char)newValue;
    }
}


void bmp8_threshold(t_bmp8* img, int threshold) {
    for (unsigned int i = 0; i < img->dataSize; i++) {
        img->data[i] = (img->data[i] >= threshold) ? 255 : 0;
    }
}


void bmp8_applyFilter(t_bmp8* img, float** kernel, int kernelSize) {
    int n = kernelSize / 2;
    unsigned char* newData = (unsigned char*)malloc(img->dataSize);
    if (!newData) {
        printf("Error: Memory allocation failed\n");
        return;
    }

    for (unsigned int y = n; y < img->height - n; y++) {
        for (unsigned int x = n; x < img->width - n; x++) {
            float sum = 0.0;
            for (int i = -n; i <= n; i++) {
                for (int j = -n; j <= n; j++) {
                    sum += img->data[(y + i) * img->width + (x + j)] * kernel[i + n][j + n];
                }
            }
            newData[y * img->width + x] = (unsigned char)(sum > 255 ? 255 : (sum < 0 ? 0 : sum));
        }
    }

    memcpy(img->data, newData, img->dataSize);
    free(newData);
}

int main() {
    
    t_bmp8* img = bmp8_loadImage("lena_gray.bmp");
    if (!img) {
        return 1;
    }

    
    bmp8_printInfo(img);

    
    bmp8_negative(img);
    bmp8_saveImage("lena_gray_negative.bmp", img);

    bmp8_brightness(img, 50);
    bmp8_saveImage("lena_gray_brightness.bmp", img);

   
    bmp8_threshold(img, 128);
    bmp8_saveImage("lena_gray_threshold.bmp", img);

    
    float** boxBlurKernel = createKernel(3);
    boxBlurKernel[0][0] = 1.0 / 9; boxBlurKernel[0][1] = 1.0 / 9; boxBlurKernel[0][2] = 1.0 / 9;
    boxBlurKernel[1][0] = 1.0 / 9; boxBlurKernel[1][1] = 1.0 / 9; boxBlurKernel[1][2] = 1.0 / 9;
    boxBlurKernel[2][0] = 1.0 / 9; boxBlurKernel[2][1] = 1.0 / 9; boxBlurKernel[2][2] = 1.0 / 9;

    bmp8_applyFilter(img, boxBlurKernel, 3);
    bmp8_saveImage("lena_gray_box_blur.bmp", img);

    
    freeKernel(boxBlurKernel, 3);

    
    bmp8_free(img);

    return 0;
}
